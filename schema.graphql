scalar country
scalar date
scalar state
scalar run_boolean
scalar long
scalar price

schema {
    query: Query
}

type Race {
    race_id: Int
    name: String
    last_date: date
    last_end_date: date
    next_date: date
    next_end_date: date
    is_draft_race: run_boolean
    is_private_race: run_boolean
    is_registration_open: run_boolean
    created: String
    last_modified: date
    description: String
    url: String
    external_race_url: String
    external_results_url: String
    fb_page_id: String
    fb_event_id: long
    address: Address
    timezone:String
    logo_url: String
    real_time_notifications_enabled: run_boolean
}

type Address {
    street: String
    street2: String
    city: String
    state: state
    zipcode: String
    country_code: country
}

type RacesResult {
    success: Boolean!
    errors: [String]
    result: RaceResult
}

input RaceFilters {
    name: String
    state: String
    city: String
    country_code: String
    race_id: long
    start_date: date
    event_id: long
}

type RaceResult{
    races(filters: RaceFilters): [RaceObject]
}

type RaceObject{
    race: Race
}

type SingleResult{
    success: Boolean!
    errors: [String]
    result: RaceDict
}

type RaceDict{
    race(filters: RaceFilters): RaceInfo
}

type RaceInfo{
    race_id: Int
    name: String
    last_date: date
    last_end_date: date
    next_date: date
    next_end_date: date
    is_draft_race: run_boolean
    is_private_race: run_boolean
    is_registration_open: run_boolean
    created: String
    last_modified: date
    description: String
    url: String
    external_race_url: String
    external_results_url: String
    fb_page_id: String
    fb_event_id: long
    address: Address
    timezone:String
    logo_url: String
    can_use_registration_api: run_boolean
    real_time_notifications_enabled: run_boolean
    events: [Events]
    sub_event_ids: [Int]
    giveaway: String
}

type Events{
    event_id: Int
    race_event_days_id: Int
    name: String
    details: String
    start_time: date
    end_time: date
    age_calc_base_date: date
    registration_opens: date
    event_type: String
    distance: String
    volunteer: run_boolean
    require_dob: run_boolean
    require_phone: run_boolean
    registration_periods: [Periods]

}

type Periods{
    registration_opens: date
    registration_closes: date
    race_fee: price
    processing_fee: price
}

type IndividualResults{
    success: Boolean!
    errors: [String]
    result: IndividualEventResults
}

type IndividualEventResults{
    individual_results_sets(filters: RaceFilters): [EventResults]
}

type EventResults{
    individual_result_set_id: long
    individual_result_set_name: String
    public_results: run_boolean
    sort_order: Int
    results_source_name: String
    results_source_url: String
    preliminary_results: run_boolean
    pace_type: run_boolean
    team_column_display_type: Int
    alt_event_ids: [long]
    results_headers: Headers
    results: [Results]
}

type Headers{
    result_id: String
    place: String
    bib: String
    first_name: String
    last_name: String
    gender: String
    city: String
    state: String
    country_code: String
    clock_time: String
    chip_time: String
    pace: String
    age: String
    age_percentage: String
}

type Results{
    result_id: long
    place: Int
    bib: Int
    first_name: String
    last_name: String
    gender: String
    city: String
    state: String
    country_code: String
    clock_time: String
    chip_time: String
    pace: String
    age: Int
    age_percentage: String
}

type Query {
    response: RacesResult!
    advancedResponse: RacesResult!
    race_response: SingleResult!
    individual_results: IndividualResults
}
